~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ OOJS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

1. Every single object is built by a constructor function.
2. A constructor makes an object linked to its own prototype.

Example: prototype linkage

function Foo(who) {
    this.me = who;
}

Foo.prototype.identify = function() {
    return "I am " + this.me;
};

var a1 = new Foo("a1");
var a2 = new Foo("a2");

a2.speak = function() {
    console.log("Hello, " + this.identify() + ".");
};

console.log(a1.constructor === Foo);						//true
console.log(a1.constructor === a2.constructor);				//true
console.log(a1.__proto__ === Foo.prototype);				//true
console.log(a1.__proto__ === a2.__proto__);					//true
console.log(a1.__proto__ === Object.getPrototypeOf(a1));	//true
console.log(a2.constructor === Foo);						//true
console.log(a1.__proto__ == a2.__proto__);					//true
console.log(a2.__proto__ == a2.constructor.prototype);		//true

---------------------------------------------------

Example: prototype chain

function Foo(who) {
    this.me = who;
}

Foo.prototype.identify = function() {
    return "I am " + this.me;
};

function Bar(who){
    Foo.call(this, who);
}

Bar.prototype = Object.create(Foo.prototype);

Bar.prototype.speak = function() {
    console.log("Hello, " + this.identify() + ".");
};

var b1 = new Bar("b1");
var b2 = new Bar("b2");

b1.speak();     //"Hello, I am b1."
b2.speak();     //"Hello, I am b2."

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ OOLO pattern ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

var Foo = {
	init: function(who){
		this.me = who;
	},
	identify: function(){
		return "I am " + this.me;
	}
};

var Bar = Object.create(Foo);

Bar.speak = function(){
	console.log("Hello, " + this.identify() + ".");
};

var b1 = Object.create(Bar);
b1.init("b1");

var b2 = Object.create(Bar);
b2.init("b2");

b1.speak();     //"Hello, I am b1."
b2.speak();     //"Hello, I am b2."

~~~~~~~~~~~~~~~ Object.create polyfill ~~~~~~~~~~~~~~~~~~~~

if(!Object.create){
	Object.create = function(o){
		function F() {}
		F.prototype = o;
		return new F();
	};
}
